# -*- coding: utf-8 -*-
"""Logistic-Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nyhGJRF_H8_R1XSIZUaskisVhapY3klC
"""

from sklearn.datasets import load_iris

dataset = load_iris()

dataset

print(dataset.DESCR)

import pandas as pd
import numpy as np

df = pd.DataFrame(dataset.data, columns=dataset.feature_names)

df.head()

df['target'] = dataset.target

df.head()

df_copy = df[df['target'] != 2]

df_copy.head()

##independent and dependent feature
X = df_copy.iloc[:,:-1]
y = df_copy.iloc[:,-1]

from sklearn.linear_model import LogisticRegression

##train test spilit
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

clasiffier = LogisticRegression()

##train
clasiffier.fit(X_train, y_train)

clasiffier.predict_proba(X_test)

##prediction
y_pred = clasiffier.predict(X_test)

y_pred

y_test

##confusion matrix,accuracy score,classification report :
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report

print(confusion_matrix(y_pred,y_test))
print(accuracy_score(y_pred,y_test))
print(classification_report(y_pred,y_test))

##hyperparameter tunning:

##1) gridsearchcv:
from sklearn.model_selection import GridSearchCV
import warnings
warnings.filterwarnings('ignore')

parameters = {'penalty':('l1','l2','lasticnet',None),'C' : [1,10,20],'solver':('newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga')}

clf = GridSearchCV(clasiffier,param_grid = parameters,cv=5)

##train data to validation data
clf.fit(X_train,y_train)

clf.best_params_

classifier = LogisticRegression(C=1, penalty='l1', solver='liblinear')

classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

y_test

y_pred

print(confusion_matrix(y_pred,y_test))
print(accuracy_score(y_pred,y_test))
print(classification_report(y_pred,y_test))

##Randomised SearchCv:
from sklearn.model_selection import RandomizedSearchCV

rlf = RandomizedSearchCV(clasiffier,param_distributions=parameters,n_iter=10,cv=5)

rlf.fit(X_train,y_train)

rlf.best_params_

classfiers = LogisticRegression(C=20, penalty='l2', solver='sag')

classfiers.fit(X_train,y_train)

y_pred = classfiers.predict(X_test)

print(confusion_matrix(y_pred,y_test))
print(accuracy_score(y_pred,y_test))
print(classification_report(y_pred,y_test))

"""Hence Accuracy of the model is 100"""

